---
title: 'OHI GoC 2024: Annual Catch'
author: "*Compiled on `r date()` by `r Sys.info()['user']`*"
format:
  html:
    code-fold: show
    toc: true
    toc-depth: 3
    toc-float: true
    number-sections: false
    theme: cerulean
    highlight-style: haddock
  pdf:
    toc: true
editor: 
  markdown:
    wrap: sentence
  chunk_output_type: inline
editor_options: 
  chunk_output_type: inline
---

# Summary

Comision Nacional de Acuacultura y Pesca (CONAPESCA) is a "decentralized body of SADER committed to legality, quality and transparency, responsible for promoting and developing coordination mechanisms with different entities to implement policies, programs and regulations that lead to and facilitate the competitive and sustainable development of the country's fishing and aquaculture sector, to increase the well-being of Mexicans.”  SADER is the Secretaría de Agricultura y Desarrollo Rural, or the Secretariat of Agriculture and Rural Development, and is Mexico's agriculture ministry.

All commercial fishing fleets need a license that requires them to state their place of boarding, species caught, what is their mode of transport, volume of product, and if they found any of the closed species (en veda).  

There are two data sources we are interested in exploring: 

-  the annual fishing production per fishing office and 
-  the annual statistics of fish and aquaculture.  

We decided to start with the production of fish by fishing office.  Though these data do not represent the spatial area where the fish were caught, we can assume that fishers bring their catch to the nearest fishing office out of simplicity and ease. This allows us to consider only fishing offices located within the Gulf of California's ecoregion boundary, reflecting the types of fish caught, how much of each was caught per year, and the landings. 

-----------------------------------------------------------------------

# Data Source - per fishery office

**Reference**: https://datos.gob.mx/busca/dataset/produccion-pesquera 

**Downloaded**: February 11, 2025

**Description**: Fisheries Production

**Time range**: 2006 - 2022

**Format**: .csv

**File location**: `Mazu:/home/shares/ohi/OHI_GOC/_raw_data/CONAPESCA/d2025/fishery_offices`

-----------------------------------------------------------------------

# Methods

1. Set-up source and file paths

2. Bind each annual csv

3. Give a binary ID to all fishery offices within GoC and another binary ID to fishery caught vs aquaculture stock

4. Produce a list of unique catch in the region throughout all years

5. Tag all stocks that could be freshwater species

6. Make an interactive plot_ly of the top 20 catches and the harvest biomass (in kg) over time

7. Make an interactive plot_ly of the top 20 catches and the landings over time


-----------------------------------------------------------------------

# Setup 

```{r}
library(tidyverse)
library(magrittr)
library(here)
library(tictoc)
library(kableExtra)
library(plotly)
library(viridis)
library(readr)
library(purrr)

# ---- sources! ----
# source(here("workflow", "R", "common.R")) # file creates objects to process data
## set the mazu and neptune data_edit share based on operating system
dir_M             <- c('Windows' = '//mazu.nceas.ucsb.edu/ohi',
                       'Darwin'  = '/Volumes/ohi',    ### connect (cmd-K) to smb://mazu/ohi
                       'Linux'   = '/home/shares/ohi')[[ Sys.info()[['sysname']] ]]

# ---- set year and file path info ----
current_year <- 2025 # Update this in the future!!
version_year <- paste0("v",current_year)
data_dir_version_year <- paste0("d", current_year)

# ---- data directories ----

# raw data directory (on Mazu)
raw_data_dir <- here::here(dir_M, "OHI_GOC", "_raw_data")

# fishery production per office raw data directory
fish_office_dir <- here(raw_data_dir, "CONAPESCA", data_dir_version_year, "fishery_offices")

# annual statistics raw data directory
stat_dir <- here(raw_data_dir, "CONAPESCA", data_dir_version_year, "statistical_yearbook_fishery_aquaculture")

# final output dir
output_dir <- here("FIS", version_year, "output")
```

# Exploration of Fishery Production by fishery office

## Bind all csvs

```{r}
# make a list of all tables
fish_prod_list <- list.files(
  path = here::here(fish_office_dir),
  pattern = ".csv$",
  recursive = TRUE,
  full.names = TRUE
)

# read in the list into one object
fish_prod_raw <- read_csv(fish_prod_list) %>% 
  bind_rows() %>% # bring all 16 csvs into one for 2006 - 2022
  janitor::clean_names() 
```

## Create binary IDs for fishery offices within GoC and wild caught origin

For general knowledge, the column "peso_vivo_kilogramos" indicates the live weight of the product, aka before processing. This is almost always heavier than after processing (gutting, headed, filleted), which is shown via "peso_desembarcado_kilogramos".  

```{r}
# all unique office names
unique(fish_prod_raw$nombre_oficina)

# the ones that are within GoC: "BAHIA TORTUGAS", "CD. CONSTITUCION", "GUERRERO NEGRO", "LA PAZ", "LORETO", "CABO SAN LUCAS", "SAN CARLOS", "PUNTA ABREOJOS", "SANTA ROSALIA", y "SAN FELIPE"
goc_offices <- c("BAHIA TORTUGAS", "CD. CONSTITUCION", "GUERRERO NEGRO", 
                 "LA PAZ", "LORETO", "CABO SAN LUCAS", "SAN CARLOS", 
                 "PUNTA ABREOJOS", "SANTA ROSALIA", "SAN FELIPE")

# create a column to indicate if it is a fishery office in the gulf
fish_prod_office_id <- fish_prod_raw %>% 
 mutate(goc_office = ifelse(nombre_oficina %in% goc_offices, 1, 0))

# all unique origins
unique(fish_prod_raw$origen) # "ACUACULTURA" "CAPTURA"     NA  ; for now lets focus on only capture.

# create a column to indicate if it is wild caught or aquaculture
fish_prod_capture_id <- fish_prod_office_id %>% 
 mutate(wild_caught = ifelse(origen %in% "CAPTURA", 1, 0))
```

## List of unique catch in the region throughout all years

```{r}
# first we will isolate offices from GoC and captura
fish_wild_goc <- fish_prod_capture_id %>% 
  filter(goc_office == 1) %>% 
  filter(wild_caught == 1)

# all unique "nombre_principal" of fish caught
length(unique(fish_wild_goc$nombre_principal)) # 60 species
print(unique(fish_wild_goc$nombre_principal))

#  [1] "ANCHOVETA"                    "BAGRE"                        "BONITO"                       "CAZON"                        "CORVINA"                      "ESMEDREGAL"                  
#  [7] "JUREL"                        "LANGOSTA"                     "LISA"                         "MERO Y SIMILARES"             "MOJARRA"                      "OTRAS"                       
# [13] "PAMPANO"                      "PARGO"                        "PETO"                         "PULPO"                        "RAYA Y SIMILARES"             "ROBALO"                      
# [19] "RONCO"                        "RUBIA Y VILLAJAIBA"           "RUBIO"                        "SIERRA"                       "TIBURON"                      "ALMEJA"                      
# [25] "BANDERA"                      "BAQUETA"                      "BERRUGATA"                    "CABRILLA"                     "CALAMAR"                      "CARACOL"                     
# [31] "GUACHINANGO"                  "JAIBA"                        "LENGUADO"                     "CAPTURA SIN REGISTRO OFICIAL" "PIERNA"                       "CAMARON"                     
# [37] "FAUNA"                        "ABULON"                       "ATUN"                         "BARRILETE"                    "SARDINA"                      "MACARELA"                    
# [43] "OSTION"                       "ALGAS"                        "ERIZO"                        "PEPINO DE MAR"                "SARGAZO"                      "LEBRANCHA"                   
# [49] "BESUGO"                       "LANGOSTINO"                   "CARPA"                        "PECES DE ORNATO"              "CINTILLA"                     "MERO"                        
# [55] "ORNATO"                       "LOBINA"                       "PEPINO"                       "FAUNA DE ACOMPANAMIENTO"      "CHARAL"                       "TRUCHA" 

# create a kable of these species
species <- c("ANCHOVETA", "BAGRE", "BONITO", "CAZON", "CORVINA", "ESMEDREGAL", 
             "JUREL", "LANGOSTA", "LISA", "MERO Y SIMILARES", "MOJARRA", "OTRAS", 
             "PAMPANO", "PARGO", "PETO", "PULPO", "RAYA Y SIMILARES", "ROBALO", 
             "RONCO", "RUBIA Y VILLAJAIBA", "RUBIO", "SIERRA", "TIBURON", 
             "ALMEJA", "BANDERA", "BAQUETA", "BERRUGATA", "CABRILLA", 
             "CALAMAR", "CARACOL", "GUACHINANGO", "JAIBA", "LENGUADO", 
             "CAPTURA SIN REGISTRO OFICIAL", "PIERNA", "CAMARON", "FAUNA",
             "ABULON", "ATUN", "BARRILETE", "SARDINA", "MACARELA", 
             "OSTION", "ALGAS", "ERIZO", "PEPINO DE MAR", 
             "SARGAZO", "LEBRANCHA", "BESUGO", 
             "LANGOSTINO","CARPA","PECES DE ORNATO","CINTILLA","MERO",
             "ORNATO","LOBINA","PEPINO","FAUNA DE ACOMPANAMIENTO",
             "CHARAL","TRUCHA")

kable(data.frame(Number = seq_along(species), Species = species), 
      col.names = c("Number","# Species"))

# all unique "nombre_comun" of fish caught
length(unique(fish_wild_goc$nombre_comun)) # 489 species, wow!!
print(unique(fish_wild_goc$nombre_comun))
```

## Interactive plots of stock and their live weight/revenue

```{r}
# summarize the kg and revenue of each species across all fishery offices in the GoC
fish_wild_goc_summary <- fish_wild_goc %>% 
  group_by(nombre_principal, ejercicio_fiscal) %>% 
  summarize(
    agg_live_weight = sum(peso_vivo_kilogramos),
    agg_revenue = sum(valor_pesos), 
    .groups = "drop"
  )

# check that all the stocks are there
length(unique(fish_wild_goc_summary$nombre_principal)) # 60, yay!
```

Live weight:

```{r}
# plot live weight interactively using plot_ly
live_weight_plotly <- fish_wild_goc_summary %>%
  plot_ly(x = ~ejercicio_fiscal, y = ~agg_live_weight, color = ~nombre_principal, 
          type = "scatter", mode = "lines") %>%
  layout(title = "Aggregate Live Weight of Stock Caught in GoC 2006 - 2022",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Live Weight (kg)"))
live_weight_plotly

# save plot
# htmlwidgets::saveWidget(live_weight_plotly, file = "output/live_weight_2006_2022_plot.html")

# filter to remove large groups (sarine, calamar, almeja, macarela)
fish_wild_goc_no_outliers <- fish_wild_goc_summary %>% 
  filter(!nombre_principal %in% c("SARDINA", "CALAMAR", "ALMEJA", "MACARELA"))

# plot live weight interactively using plot_ly
live_weight_plotly_no_outliers <- fish_wild_goc_no_outliers %>%
  plot_ly(x = ~ejercicio_fiscal, y = ~agg_live_weight, color = ~nombre_principal, 
          type = "scatter", mode = "lines") %>%
  layout(title = "Aggregate Live Weight of Stock Caught in GoC 2006 - 2022",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Live Weight (kg)"))
live_weight_plotly_no_outliers

# save plot
htmlwidgets::saveWidget(live_weight_plotly_no_outliers, file = "output/live_weight_no_outliers_2006_2022_plot.html")
```

Revenue:

```{r}
# plot revenue interactively using plot_ly
revenue_plotly <- fish_wild_goc_summary %>%
  plot_ly(x = ~ejercicio_fiscal, y = ~agg_revenue, color = ~nombre_principal, 
          type = "scatter", mode = "lines") %>%
  layout(title = "Aggregate Revenue of Stock Caught in GoC 2006 - 2022",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Revenue (pesos)"))
revenue_plotly

# save plot
# htmlwidgets::saveWidget(revenue_plotly, file = "output/revenue_plotly_2006_2022_plot.html")
```


Total catch/revenue:

```{r}
# summarize the kg and revenue across all fishery offices in the GoC for each year
total_fish_wild_goc_summary <- fish_wild_goc %>% 
  group_by(ejercicio_fiscal) %>% 
  summarize(
    agg_live_weight = sum(peso_vivo_kilogramos),
    agg_revenue = sum(valor_pesos)
  )

# plot live weight interactively using plot_ly
total_live_weight_plotly <- total_fish_wild_goc_summary %>%
  plot_ly(x = ~ejercicio_fiscal, y = ~agg_live_weight, 
          type = "scatter", mode = "lines") %>%
  layout(title = "Total Catch in GoC 2006 - 2022",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Live Weight (kg)"))
total_live_weight_plotly

# save plot
# htmlwidgets::saveWidget(total_live_weight_plotly, file = "output/total_live_weight_2006_2022_plot.html")

# plot revenue interactively using plot_ly
total_revenue_plotly <- total_fish_wild_goc_summary %>%
  plot_ly(x = ~ejercicio_fiscal, y = ~agg_revenue, 
          type = "scatter", mode = "lines") %>%
  layout(title = "Total Fishing Revenue in GoC 2006 - 2022",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Revenue (pesos)"))
total_revenue_plotly

# save plot
# htmlwidgets::saveWidget(total_revenue_plotly, file = "output/total_revenue_2006_2022_plot.html")
```

### With Drop down feature

Using this as a reference: <https://community.plotly.com/t/need-help-on-using-dropdown-to-filter/6596/2>

```{r}
# plot live weight interactively using plot_ly
drop_live_weight_plotly <- fish_wild_goc_summary %>%
  plot_ly(
    x =  ~ ejercicio_fiscal,
    y =  ~ agg_live_weight,
    type = "scatter",
    mode = "lines",
    # set hover text for better readability
    text =  ~ paste(
      "Species:",
      nombre_principal,
      "<br>Year:",
      ejercicio_fiscal,
      "<br>Live Weight:",
      agg_live_weight
    ),
    hoverinfo = "text",
    # Apply the filter transform
    transforms = list(
      list(
        type = 'filter',
        target =  ~ nombre_principal,
        operation = '=',
        value = unique(fish_wild_goc_summary$nombre_principal)[1] # Initial value.
      )
    )
  ) %>%
  layout(
    title = "Aggregate Live Weight of Stock Caught in GoC 2006 - 2022",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Live Weight (kg)"),
    # Update menus is where the interactive filter buttons will be.
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0, # Set default to the first value.
        buttons = lapply(
          unique(fish_wild_goc_summary$nombre_principal), # For all unique species.
          function(species) {
            list(
              method = "restyle",
              args = list(
                "transforms[0].value", # Change the value in the 1st transform filter.
                species # Change the filter value to the species name.
              ),
              label = species # The name of the species on the button.
            )
          }
        )
      )
    )
  )

drop_live_weight_plotly
```

### Adding habitat data

From a self-constructed csv using all the different groups (nombre_principal) and determining whether the group is primarily marine, euryhaline, or freshwater.

```{r}
# read in csv
habitat_raw <- read_csv(here::here(raw_data_dir, "CONAPESCA", data_dir_version_year, "id_marine_freshwater_fishery_offices.csv")) %>% 
  janitor::clean_names()
```
```{r}
# integrate with the CONAPESCA fishery offices production data
habitat_fish_wild_goc_summary <- fish_wild_goc_summary %>%
  left_join(habitat_raw %>% select(nombre_principal, habitat), by = "nombre_principal") %>% # only bringing in whether it is marine etc for viz purposes
  # Convert habitat to factor, handling NAs explicitly
  mutate(habitat = factor(habitat, levels = c("Marine", "Freshwater", "Euryhaline", "Varies", NA)))

habitats_considered_marine <- c("Marine", "Euryhaline")

# create ID for marine/euryhaline or not, only consider those two, not freshwater or NA
habitat_fish_wild_goc_clean <- habitat_fish_wild_goc_summary %>% 
  mutate(marine = ifelse(habitat %in% habitats_considered_marine, 1, 0))

# filter only to marine = 1
habitat_marine_species_summary <- habitat_fish_wild_goc_clean %>% 
  filter(marine == 1)
```

Create interactive drop down with ONLY marine:

1) Live weight

```{r}
# plot live weight interactively using plot_ly
marine_live_weight_plotly <- habitat_marine_species_summary %>%
  plot_ly(
    x =  ~ ejercicio_fiscal,
    y =  ~ agg_live_weight,
    type = "scatter",
    mode = "lines",
    # set hover text for better readability
    text =  ~ paste(
      "Species:",
      nombre_principal,
      "<br>Year:",
      ejercicio_fiscal,
      "<br>Live Weight:",
      agg_live_weight
    ),
    hoverinfo = "text",
    # Apply the filter transform
    transforms = list(
      list(
        type = 'filter',
        target =  ~ nombre_principal,
        operation = '=',
        value = unique(habitat_marine_species_summary$nombre_principal)[1] # Initial value.
      )
    ),
    line = list(color = "deepskyblue4") # changing color
  ) %>%
  layout(
    title = "Aggregate Live Weight of Stock Caught in GoC 2006 - 2022",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Live Weight (kg)"),
    # Update menus is where the interactive filter buttons will be.
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0, # Set default to the first value.
        buttons = lapply(
          unique(habitat_marine_species_summary$nombre_principal), # For all unique species.
          function(species) {
            list(
              method = "restyle",
              args = list(
                "transforms[0].value", # Change the value in the 1st transform filter.
                species # Change the filter value to the species name.
              ),
              label = species # The name of the species on the button.
            )
          }
        )
      )
    )
  )

marine_live_weight_plotly
```

2) Revenue

```{r}
# plot live weight interactively using plot_ly
marine_revenue_plotly <- habitat_marine_species_summary %>%
  plot_ly(
    x =  ~ ejercicio_fiscal,
    y =  ~ agg_revenue,
    type = "scatter",
    mode = "lines",
    # set hover text for better readability
    text =  ~ paste(
      "Species:",
      nombre_principal,
      "<br>Year:",
      ejercicio_fiscal,
      "<br>Live Weight:",
      agg_live_weight
    ),
    hoverinfo = "text",
    # Apply the filter transform
    transforms = list(
      list(
        type = 'filter',
        target =  ~ nombre_principal,
        operation = '=',
        value = unique(habitat_marine_species_summary$nombre_principal)[1] # Initial value.
      )
    ),
    line = list(color = "darkgreen") # changing color
  ) %>%
  layout(
    title = "Aggregate Revenue of Stock Caught in GoC 2006 - 2022",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Revenue (pesos)"),
    # Update menus is where the interactive filter buttons will be.
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0, # Set default to the first value.
        buttons = lapply(
          unique(habitat_marine_species_summary$nombre_principal), # For all unique species.
          function(species) {
            list(
              method = "restyle",
              args = list(
                "transforms[0].value", # Change the value in the 1st transform filter.
                species # Change the filter value to the species name.
              ),
              label = species # The name of the species on the button.
            )
          }
        )
      )
    )
  )

marine_revenue_plotly
```
